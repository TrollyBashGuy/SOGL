truthy/falsy values:
	outputs will be 1:true and 0:false
	inputs: 
		truthy: 1,2,3,...,-1,-2,-3,...,"anything except ""”,["stuff"],[""],[0]
		falsy:  0,"”,[]
temp: !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
all the current chars:
⁰¹²³⁴⁵⁶⁷⁸T¶⁹±∑«»æÆø‽§°¦‚‛⁄¡¤№℮½ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~←↑↓≠≤≥∞√═║─│≡∙∫○׀′¬⁽⁾⅟‰÷╤╥ƨƧαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσΤτΥυΦφΧχΨψΩωāčēģīķļņōŗšūž¼¾⅓⅔⅛⅜⅝⅞↔↕∆≈┌┐└┘╬┼╔╗╚╝░▒▓█▲►▼◄■□…‼⌠⌡͏→“”‘’
         ^ \t

IO:
	out: if array, if not specified otherwise, then will output each item in a newline.
	, string input
	. number input 
	O in a newline output POP
	o append (appends to the last line). If an array, then print in classical array outputing.
	Q output 2 joined.
	q output in a newline but dont pop
	P append (appends to the last line) and disables auto-output once called
	p output in a newline and disable auto-output
	t outputs in a newline the last thing in stack (doesn't pop) and disables auto-output
useful chars: "”¶±«»≤≥’→←╥∫
	

0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
0123456789012345678901234567890123456789012345678901234567890123456789
00000000001111111111222222222233333333334444444444555555555566666666667777777777
Quriks:
0*0/ - "0" - push "codegolf"
1*1/ - "1" - push "stackexchange"
2*2/ - "2" - push "qwertyuiop", "asdfghjkl" and "zxcvbnm"
3*3/ - "3" - push the source code of this
4*4/ - "4" - execute the top thing on stack as a SOGL program
5*5/ - "5" - push [".com", ".net", ".co.uk", ".gov"]
6*6/ - "6" - push "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
7*7/ - "7" - 
8*8/ - "8" - 
9*9/ - "9" - decompress everything after this string of chars and have the stack start with it (unless before it there is an unclosed `”`. Any `←`s or anything won't work after it so base 256 can be used.)
0/0* - "a" - output POP to eout.txt (error out) and "crash".
1/1* - "b" - 
2/2* - "c" - push ["qwertyuiop", "asdfghjkl", "zxcvbnm"]
3/3* - "d" - 
4/4* - "e" - 
5/5* - "f" - 
6/6* - "g" - 
7/7* - "h" - 
8/8* - "i" - 
9/9* - "j" - 
UU - "k" - 
uu - "l" - push "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
SU - "m" - push "1234567890"
Su - "n" - 
US - "o" - 
uS - "p" - 
!? - "q" - 
²² - "r" - 
!! - "s" - 
2÷ - "t" - 

Compression:
(source of words: http://en.wiktionary.org/wiki/Wiktionary:Frequency_lists#Top_English_words_lists)
characters:
NT !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
^^ newline & tab	
extended charpairs (31): ‾//\\  /\\/--__||[]][())(""''
                         ^ single char exception
1) converts from either base250 or base256 ("‘ - 250, 9*9/ - 256) to base 2.
2) reads a base8 number
	0 - custom string:
		first - base32 - the amount of chars (2-33 inclusive)
		next, reads a base((readAmount>length+2?98:97)-just read) number until it's result is 0
		next is the actual message with the chars defined above
	1 - simply take a base97 number and push its corresponding character
	2 - english:
		first 2 bits - how many words (1-4 inclusive)
		repeat that many times
			1 bit - if either long(1) or short(0):
			short: 9 bits - from the word file which item (1-512)
			long: 16 bits - from the word file which item (513-66049)
			and a space
		and a space if this was 4 words long and next is words too
	3 - ascii string:
		first 4 bits - how many letters (3-18 inclusive)
		next ceiling(log(97)*X/log(2)) bits are the string to push to decoded
	4 - box string:
		first 6 bits - mode:
			each bit corresponding to " ", "/" and "\", "|", "_", "-", "\n"
			diffecentChar# = count 1s in ^ + 2nd bit
		next 5 bits - amount of boxstring chars (differentChar#+2 - differentChar#+33 inclusive)
		continuing ceiling(log(differentChar#)*char#/log(2)) bits are the encoded string
	5 - box string:
		the same as 100 but with instead of 5 bits saying the length but 6, so (34+differentChar# - 98+differentChar# inclusive)
	6 - TBD
	7 - custom string:
		the same as 000 but with instead of 5 bits saying the length but 6, so (35+amountofchars - 99+amountofchars inclusive)
note: the actual binary data in the string is reversed because prependng 0s do matter but leading zeroes don't matter (well only when you want to get a custom string with 2 space characters and 5 of them)
chardefs:
⁰	
¹	x inputs
		string: POPs until the popped isn't a string and puts all popped in an array
			`"hello”"world”¹` = ["hello", "world"]
			`123"foo”"bar”¹` = 1,2,3,["foo","bar"]
		number: POPs until the popped isn't a number and puts all popped in an array
			`"hello”123¹` = "hello",[1,2,3]
			`12345¹` = [1,2,3,4,5]
		array: same as strings but with arrays (arrays must be the same dimension)
²	1 input
		number: squares the number
		string: joins to itself (`hello"²` = ["hellohello"])
		implicitness:
			squares the inputted number
³	1 input
		duplicates POP twice (`123³` = [1, 2, 3, 3, 3])
⁴	1 input
		duplicate the 2nd from the top of the stack
⁵	1 input
		duplicate the 3rd from the top of the stack
⁶	3 inputs
		any: puts the 2nd and 3rd from bottom ontop of the stack
			`234⁶` = [4, 2, 3]
⁷	
⁸	
\t	
\n	(¶)
⁹	
±	1 input
		number: negates the number
			`8±` = -8
		string: reverses the string
			`"hello”±` = "olleh"
		array: reverses the array
		two of the signs following each other: reverse (or negate) the contents of an array
∑	1 input:
		array: add/join the whole array together 
			`[1,2,3]` = 6
			`["9+10= ”, 19]` = "9+10= 19"
		number, string: add/join the whole stack together
«	1 input:
		number: bitshift left
		string: put the first letter at the end
		array: put the first item at the end
»	1 input:
		number: bitshift right
		string: put the last letter at the start
		array: put the last item at the start
æ	pushes an array of vowels ([a,e,i,o,u])
Æ	
ø	pushes an empty string
‽	1 input
		any: if not POP then (ends with `}`)
§	
°	
¦	1 input
		number: sign (`-5` = -1, `0` = 0, `72.6` = 1)
		string: makes an array with all the distinct characters in the string in order of ASCII.
		array: do the above for each item
‚	
‛	
⁄	1 input
		string, number: get the length of POP
		array: get an identical array with each value being correspondings length
¡	1 input
		any: same as `!!` - if value is truthy, return 1, else 0
¤	2 inputs
		string array & array, array & string array: get a string with each item of the 1st array repeated the amount of corresponding 2nd array, joined
		number array & number array: get a string with each item of the 1st array repeated the amount of corresponding 2nd array, joined
№	1 input
		number: factorial of POP
℮	
½	1 input
		number: divide by 2 (not rounded unlike "»")
←	stop the program. Additionally adds a } after it as nothing after it can be executed
 	(space) - pushes the next character. Examples:
		`123` = [1, 2, 3]
		`12 34` = [1, 2, "3", 4]
		`12 a43` = [1, 2, "a", 4, 3]
!	1 input
		number: not
		string: NOT each character as a number
		array: NOT all of its contents
"	starts a string. String enders are (and are explained on ): " “”‘’ ". If at the start, can be removed if the string doesn't contain ".
	“: string array
	”: normal string ender (also the default one if none are present)
	‘:
	’:
	Examples: 
		`"hello”` = [hello]
		`"world` = [world]
		`"hi ”+"there` = [hi there]
		`"⁰²¹»ø’` = [0, 2, 1, 6, 11]
		`"Look how easily I can display the " character!”` = [Look how easily I can display the " character!]
#	outputs a quote character (")
$	outputs a string ender quote (”)
%	2 inputs
		numbers: modulo (`83%` = 1, `93%` = 0)
&	2 inputs
		strings, numbers: logical and.
		arrays: makes a new array only with the items that are in both arrays
'	pushes the next charater
(	do while the top value of the stack is not equal to the previous answer.
)	
*	2 inputs
		numbers: multiplies the two
		strings: 
		string & number, number & string: repeats the string the number amount of times
		1D array & number, number & 1D array: multiply the array horizontally
			`["hello", "bar"]3*` = ["hellohellohello", "bar  bar  bar  "]
			`[["ab","cd","ef"],["g","h","i"]]3*` = [["ababab","cdcdcd","efefef"],["g g g ","h h h ","i i i "]]]
			`[1, 3, 5]7*` = [7, 21, 35]
+	2 inputs
		numbers: adds the two
			`3 5+` = 8
			`6544+++` = 19
		string & number, number & string, strings: joins the two
			`"hello, ”6+` = "hello, 6"
			`"hello”"world”` = "helloworld"
			`6"th place”` = "6th place"
		array & number, number & array, array & string, string & array, arrays: adds the array elements together with complications. 
			(using infix & array definitions for simplicity)
			`"hello", ["world", "baz"]` = ["hello", "world", "baz"]
			`[["bar”, "baz”], ["hello”, "world”]] + "foo”` = [["bar”, "baz”], ["hello”, "world”, "foo”]]
			`"foo” + [["bar”, "baz”], ["hello”, "world”]]` = [["foo”, "bar”, "baz”], ["hello”, "world”]]
			`["hi”] + ["there”] = ["hi”, "there”]`
			`["foo”] + [["bar”, "baz”], ["hello”, "world”]]` = [["foo”], ["bar”, "baz”], ["hello”, "world”]]
			`[["bar”, "baz”], ["hello”, "world”]], ["foo”]` = [["bar”, "baz”], ["hello”, "world”], ["foo”]]
			basically it adds the thing in the array at the level required so array dimensions stay the same
,	takes user input as string
-	2 inputs
		numbers: 1st num - 2nd num (so `7 3-` = 4)
		string & number, number & string: remove the nth letter from the string(1-indexed)
		strings: removes the 1st string from the 2nd string
		array, string: removes all occurences of that string from the array. Also POPs the string
		array, number: removes all occurences of that number from the array. Also POPs the number
	1 input (if the last one is an array, ignore the one before and do)
		array: subtract each item from the next:
			`[3, 6, 13, 5]-` = [3, 7, 8]
.	takes user input as number
/	2 inputs
		numbers: divide
		
0	pushes 0
1	pushes 1
2	pushes 2
3	pushes 3
4	pushes 4
5	pushes 5
6	pushes 6
7	pushes 7
8	pushes 8
9	pushes 9
:	1 input
		duplicates POP once 
			`123:` = [1, 2, 3, 3]
;	2 inputs
		any: reverse the last 2 things on stack
<	2 inputs
		any: if POP is greater than POP
			`"8”5<` = falsy
			`85<` = falsy
			`55<` = falsy
			`"3”5<` = truthy
			`25<` = truthy
=	2 inputs
		number & string, string & number: pushes if equal
			`123 "123”=` = truthy
		array & number, array & string, number & array, string & array: if all in array are equal to the other input
>	2 inputs
		any: if POP is less than POP
			`"8”5>` = truthy
			`85>` = truthy
			`55>` = falsy
			`"3”5>` = falsy
			`25>` = falsy
?	if then (ends with `}`)
@	pushes a space
A	1 input
		saves POP on variable "a"
B	1 input
		saves POP on variable "b"
C	1 input
		saves POP on variable "c"
D	1 input
		saves POP on variable "d"
E	1 input
		saves POP on variable "e"
F	loads the current repeat itiration (1-based)
G	put the 3rd from the top of the stack ontop (`[1, 2, 3]G` -> [2, 3, 1])
H	1 input
		number: decreases by 1
		string: decreases the last number in stack. If there are none, put a -1 in the stacks start.
		array: rotate left
			`[["gh","ab"],["ij","cd"],["kl","ef"]]I` = [["ab","cd","ef"]["gh","ij","kl"]]
I	1 input
		number: increases by 1
		string: increases the last number in stack. If there are none, put a 1 in the stacks start.
		array: rotate right
			`[["ab","cd","ef"]["gh","ij","kl"]]I` = [["gh","ab"],["ij","cd"],["kl","ef"]]
J	1 input
		number: sin
		string: pops the last letter off and pushes it
		array: pop the last item off the array and pushes it
		implicitness: number
K	1 input
		number: cos
		string: pops the first letter off and pushes it
		array: pop the first item off the array and pushes it
		implicitness: number
L	pushes 10
M	pushes 100
N	pushes 256
O	1 input
		output input
P	1 input
		append input to the current output line (appends to the last "O".)
Q	2 inputs
		output both (joined)
R	1 input
		string: convert to ordinals (stack an array with the values)
		number: convert to character (inverse of above)
		array: do above for all contents
S	1 input
		string: swaps case
T	append to last line but don't pop, disables auto output
U	1 input
		string: UPPERCASES the string
		number: ceilings the number
		array: does the above on all contents
V	1 input
		string: pushes if is fully uppercase
W	2 inputs
		number & string, string & number: pop the number and push the nth(1-indexed) thing from the string
		number & array, array & number: pop the number and push the 1st occurence of it. 0 in case of none.
		strings: give out the index of the 2nd string in the 1st one (1-indexed, 0 in the case of none)
		string & array, array & string: pop the string and give out the 1st occurence of the string in the array. 1-indexed, 0 in case of none
	implicitness: (before ":" is what's already stacked)
		number: string from who get the number
		string: pushes the IDs of the string chars which are in the text (in order of appearence in the input)
		array: pushes the items in the array that appear in the input in the order of appearence
		none: asks for char and outputs its ID in the english alphabet (1-indexed, 0 for other things).
X	1 input
		any: simply POP and do nothing with it.
			`"hello”{}X` = ["h", "e", "l", "l"]
Y	
Z	pushes the english alphabet uppercase
[	while top of the stack is truthy do ... (end with "}" but not required). doesn't pop. e.g. `[1-q` would print all numbers from input (not included) to 0 (included) and would be the same as `[1-O}`
\	2 inputs
		numbers: does divide?
	inplicitness:
		none: push the number and if divides by 10
		number: does input divide by POP
]	do ... while top of the stack is truthy (end with "}"). does pop. e.g. `]1-q:` would print all numbers from input (not included) to 0 (included)and would be the same as `]1-q:}`
^	2 inputs
		numbers: power (`28^` = 256, `2^` = 2^input, `^` = input^input)
_	1 input
		array: split the array into its contents on the stack
`	
a	loads variable "a" to stack. Default is 0
b	loads variable "b" to stack. Default is user input number
c	loads variable "c" to stack. Default is an array of the 256 ASCII + extended ASCII characters
d	loads variable "d" to stack. Default is user input string
e	loads variable "e" to stack. Default is user input number
f	loads the current repeat itiration (0-based) or the outer loops itiration (1-indexed) if it exists
g	1 input
		number: greatest common divisor
h	swaps the 2nd-from-top and 3rd-from-top ([1,2,3]->[2,1,3])
i	pushes last input taken
j	1 input
		number: sin (degrees)
		string: pops the last letter off
		array: pop the last item off the array
k	1 input
		number: cos (degrees)
		string: pops the first letter off
		array: pop the first item off the array
l	1 input
		array: pushes the length of the array, doesn't pop
		string: pushes the length of the string, doesn't pop
		number: pushes the length of the number, doesn't pop 
			`5l`=1
			`12.0l`=2
			`12.345l`=5
m	1 input
	mold into POP POP 
		`"hello”9m` = hellohell
n	1 input
	mold into POP POP 
		`"hello world”3m` = ["hel", "lo ", "wor", "ldh"]
o	1 input
		//append input to a new output line (continuing "O"s will make new lines after this)
p	1 input
		like "O" (outputs in newline) but disables auto-output
q	1 inputs
		output but dont POP
r	1 input
		string: convert to number (`"123”r` = 123 )
		number: convert to character (inverse of above)
s	1 input
		string: checks if contains multiple cases
t	1 input
		output the string without popping it & disable auto-output
u	1 input
		string: lowercases the string
		number: floors the number
		array: does the above on all contents
		implicitness: string
v	1 input
		string: pushes if is fully lowercase
w	2 inputs
		number & string, string & number: pop the number and show the 1st occurence(1-indexed) of the number in the string
		number & array, array & number: pop the number and push the nth(1-indexed) thing from the array. 
		strings: give out an array with the values of where the 2nd string was in the 1st one. 
		numbers: 
	implicitness: (before ":" is what's already stacked)
		number: string from who get the number
		string: whichth letter to choose
		array: whichth item to choose
		none: asks for char and outputs its ID in ASCII.
x	1 input
		any: simply POP twice and do nothing with it.
			`"hello”{}x` = ["h", "e", "l"]
y	
z	pushes the english alphabet lowercase
{	1 input
		number: loop/repeat that many times the continuing code, closed by "}"
		string: for each char in the string and push the char looping at, closed by "}" or EOF
		array: for each item in the array and push the char looping at, closed by "}" or EOF
|	
}	loop/if/for each/anything ender. `x+,}{O` would be equal to `[x+,}{O}`
~	2 inputs
		numbers: if abs(a-b)<1
		strings:
		arrays:

↑	
↓	
≠	2 inputs
		string & number, number & string: pushes if aren't equal (their value, `123 "123”=` would give out truthy)
		array & number, array & string: if at least 1 item in array is not equal to the other input
≤	puts the last item of the stack ontop
≥	puts the 1st thing on the stack below everything
∞	
√	1 input
		number: square root
		string: convert the string into an array like:
			`"abcdef123”` = [["abc"], ["def"], ["123"]]
		string-array: converts the contents into an array like:
			`[["abcd”], ["ef12”]]` = [[["ab”], ["cd”]], [["ef”], ["12”]]]
═	
║	1 input
		number: 
		string, array: remove duplicates
─	2 inputs
		number & number: (2nd is base) convert x from base 10 to base y. If base is 2 and is constant then instead of an array with the digits it gives a string (e.g. `2─` = "101001101")
		string & number: convert each letter of string to base y in an array (if base is 2 then convert to base 2 strings with 8 0s)
	implicitness:
		number: convert input as string to base specified (or number if input specifies it)
		string: convert the string to base input
		array: convert the arrays contents to base input
		
│	2 inputs
		number & number: converts the 1st number from base x to base 10
		string & number: converts the string from base 10 to base x (if starting base is bigger than 10 it'll count it as ASCII) and output number
≡	2 inputs
		strings, numbers: are the inputs excatly identical
		`9”9≡` = true
		`5.0”5≡` = false
		`55≡` = true
		arrays: check if all items are equal to their corresponding items in the other array
∙	2 inputs
		number & string, string & number: get an array with number many items all being the string
		number & array, array & number: multiply the array vertically:
			`["hello", "world"]3∙` = ["hello", "world", "hello", "world", "hello", "world"]
∫	1 input
		number: loop/repeat that many times the continuing code, closed by "}", each time pushing the current loop-point (0-based).
		string: itirate over the string and push the char looping at twice
		array: for each item in each item in each item in ... in the array loop, ending with "}" or EOF, each time pushing the current item. Example:
			`[["ab"], ["cd"], ["76f"]]G` (that's not how you define arrays but used as example) = [a, b, c, d, 7, 6, f]
○	1 input
		truthy: exit with falsey output (0)
		falsy: nothing
		if required, will put a `}` after itself
׀	1 input
		truthy: exit with truthy output (1)
		falsy: nothing
		1 input
		if required, will put a `}` after itself
′		checks if number is prime (the unicode character is called "prime" :D)
¬	1 input
		number: loop that many times the continuing code, closed by "}", each time pushing the current loop-point (1-based).
⁽	(upper "(")uppercase the first letter of word
⁾	(upper ")")lowercase the first letter of word
⅟	1 input
		does 1/POP
‰	2 inputs
		numbers: ((POP-1) modulo) + 1 (`83%` = 1, `93%` = 3, `9%` = ((input-1)%9)+1)
÷	2 inputs
		numbers: divides and floors
╤	1 input
		string: depalendromize
╥	1 input
		string: palendromize
			`"hello”` = "hellolleh"
			`["foo","bar"]` = ["fooof","barab"]
ƨ	pushes the next character repeated twice
Ƨ	pushes the next two characters as a string
Α	
α	
Β	
β	
Γ	
γ	
Δ	1 input
		number: pushes range; inclusive
			`6Δ` = "123456"
			`12Δ` = "010203040506070809101112"
		string: pushes all printable ascii chars up to that point; inclusive
			` 6Δ` =  " !\"#$%&'()*+,-./0123456"
δ	1 input
		number: pushes range; exclusive
			`6δ` = "012345"
			`11Δ` = "01020304050607080910"
		string: pushes all printable ascii chars up to that point; exclusive
			` 6δ` =  " !\"#$%&'()*+,-./012345"
Ε	
ε	
Ζ	pushes the next two characters as seperate strings
		`Ζab` -> ["a", "b"]
ζ	
Η	
η	
Θ	2 inputs
		string, string: split X with Y
			`"foo-bar”"-”Θ` -> ["foo", "bar"]
θ	1 input
		string: split on spaces
			`"Hello world”` -> ["Hello", "world"]
Ι	
ι	essentially ”". 
	`"helloιworld”` -> "hello", "world"
Κ	
κ	
Λ	
λ	
Μ	
μ	
Ν	
ν	
Ξ	
ξ	
Ο	
ο	
Π	
π	
Ρ	
ρ	1 input
	anything: checks if is a palendrome
Σ	
σ	
Τ	1 input
	number: log of base 10
τ	1 input
	number: log of base 2
Υ	2 inputs
	numbers: log of base POP
υ	
Φ	
φ	
Χ	
χ	
Ψ	1 input
		number: get a random number from 1 to the number; inclusive, Doesn't pop
		string: get a random character from " " to the strings 0th char; inclusive, doesn't pop
ψ	1 input
		number: get a random number from 0 to the number. Does pop
		string: get a random character from the string. Does pop
Ω	
ω	
ā	pushes an empty array
č	1 input
		string array: joins the array into a single string
			`["hello ", "foo"]` = "hello foo"
		string: split into a char array
			`"bar"` = ["b", "a", "r"]
ē	push the number in variable e and increases it after (equal to `e:IE` and `eeIE`) or for a string, push the last char and POP it off of the string.
ģ	
ī	
ķ	
ļ	
ņ	
ō	
ŗ	3 inputs
		string & string & string: replace with POP POP in POP 
			`"hello wrd”"r”"orl”ŗ` = "hello world"
		string & string & array: replace each 1ns string character in the 1st string with the item in the array which corresponds to its count
			`"h-l-o wo-ld”"-”["e","l","r"]` = "hello world"
		string & array & string: replace from the 1st string any of the array with the 2nd string
			`"hello world”["h","l","o"]"^”` = "^e^^^ w^r^d"
		array & string & string: replace in each item of the array occurences of the 1st string with the 2nd string
			`["hello", "world"]"l”"*”` = ["he**o", "w*rld"]
		everything else is just the above mixed together
š	
ū	
ž	
¼	
¾	
⅓	
⅔	
⅛	
⅜	
⅝	
⅞	
↔	
↕	
∆	
≈	
┌	
┐	
└	
┘	
╬	
┼	2 inputs
		array & array: appends horizontally
			`["hello", "world"] ┼ ["foo", "bar"]` = ["hellofoo", "world bar"]
		array & string, string & array: append the string vertically horizontally on the array
			`["this", "is", "SPARTAA"] ┼ "hello"` = ["this   hl", "is     eo", "SPARTAAl"]
╔	
╗	
╚	
╝	
░	
▒	
▓	
█	
▲	
►	
▼	
◄	
■	
□	
…	
‼	else if an if is before in the scope
		`8=?"is 8”‼"isnt 8”`
⌠	
⌡	
͏	
→	in the further code replace all occurences of the next character to the preceding code.
	Examples:
		`5{t}→Y \Y /Y` -> ` \5{t} /5{t}` -> "\\\\\/////"
“	string ender: split string in a string-array (each item being a character)
”	string ender: pushes the normal string
‘	string ender: compressed string decompressor (long numbers, base250 to ASCII, english)
’	string ender: adds to the stack the numeric values of the string (1-indexed)
		number starter: next character is tanslated to a number (starts with 11, skips 256 as those are already 1-char numbers)

CGSE post generator: SOGL→$  4*→U](https://github.com/dzaima/$→~"#[$~), ”od⁄o" [bytes~/blob/master/chartable.md)”oUd+p"Explanation:”OUO4,{ -=?³d⁄6+;-  *o,o  *O}:3-dWoI}  2*o,o
usage: next line = the code; next = "-" for new line, " " for continuation of prevoius; next = empty; next = each line as a description for each "-".